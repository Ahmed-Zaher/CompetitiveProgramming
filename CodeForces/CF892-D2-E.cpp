/*
 * We can prove that all MSTs can be the output of running Kruskal's algorithm,
 * where different runs of the algorithm only differ in the order they look at
 * edges having the same weight.
 * Given that, we know that Kruskal inspects edges in order of increasing weight, after
 * processing all edges with weight W, all partial-MSTs generated by any instance of Kruskal will
 * have the same connectivity, that is, if we contract all connected components into 1 node, that contracted
 * graph would be the same for any Kruskal instance.
 * So given a query, it's safe to check its edges in order of increasing weight.
 * Initially we have an empty MST, we first check query edges with min. weight, if they don't create any cycles then
 * they can be included in some Kruskal instance, then we process all edges from the graph with min. weight
 * and contract corresponding nodes. Then we check on next weight and so on..
 */
#include <bits/stdc++.h>

using namespace std;

const int OO = 1e9;
const double EPS = 1e-9;

#define ndl cout << '\n'
#define sz(v) int(v.size())
#define pb push_back
#define mp make_pair
#define fs first
#define sc second
#define present(a, x) (a.find(x) != a.end())
#ifdef LOCAL
#define db(...) ({cout << "> Line " << __LINE__  \
		<< ": "; _db(#__VA_ARGS__, __VA_ARGS__);})
#define RNG() rng()
#else
#define db(...) true
#define RNG() true
#endif

template<class T>
void _db(const char *dbStr, T e) {
	cout << dbStr << " = " << e << endl;
}
template<class T, class... L>
void _db(const char *dbStr, T e, L... r) {
  while(*dbStr != ',') cout << *dbStr++;
  cout << " = " << e << ','; _db(dbStr + 1, r...);
}
template<class S, class T>
ostream& operator<<(ostream& o, const map<S, T>& v) {
	o << "["; int i = 0;
	for (const pair<S, T>& pr : v) o << (!i++ ? "" : ", ") << "{"
	<< pr.fs << " : " << pr.sc << "}"; return o << "]";
}
template<template <class, class...> class S, class T, class... L>
ostream& operator<<(ostream& o, const S<T, L...>& v) {
	o << "["; int i = 0;
	for (const auto& e : v) o << (!i++ ? "" : ", ") << e;
	return o << "]";
}
template<class S, class T>
ostream& operator<<(ostream& o, const pair<S, T>& pr) {
	return o << "(" << pr.fs << ", " << pr.sc << ")";
}
ostream& operator<<(ostream& o, const string& s) {
	for (const char& c : s) o << c;
	return o;
}

template<class T> using V = vector<T>;
template<class T> using VV = V<V<T>>;
template<class T> using VVV = VV<V<T>>;
using ll = long long;
using pii = pair<int, int>;
using vi = V<int>;
using vii = V<pii>;
using vvi = VV<int>;
using mii = map<int, int>;
using umii = unordered_map<int, int>;
using si = set<int>;
using usi = unordered_set<int>;

struct UnionFind {
	vi p, rank, setSize;
	int numSets;
	UnionFind(int n) {
		setSize.assign(n, 1);
		numSets = n;
		rank.assign(n, 0);
		p.assign(n, 0);
		for (int i = 0; i < n; ++i)
			p[i] = i;
	}
	int findSet(int i) {
		return (p[i] == i) ? i : (p[i] = findSet(p[i]));
	}
	bool isSameSet(int i, int j) {
		return findSet(i) == findSet(j);
	}
	void unionSet(int i, int j) {
		if (!isSameSet(i, j)) {
			--numSets;
			int x = findSet(i), y = findSet(j);
			if (rank[x] > rank[y]) {
				p[y] = x;
				setSize[x] += setSize[y];
			} else {
				p[x] = y;
				setSize[y] += setSize[x];
				if (rank[x] == rank[y])
					++rank[y];
			}
		}
	}
	int numDisjointSets() {
		return numSets;
	}
	int sizeOfSet(int i) {
		return setSize[findSet(i)];
	}
};

const int MX_W = 5e5 + 5;
int n, m, visID;
bool cycle;
V<pair<int, pii>> edges;	// (w, (u, v))
vvi adj;
vi vis;
VV<pair<int, pii>> queryEdgesPerWeight(MX_W);	// (queryIdx, (u, v))
VV<pii> edgesPerWeight(MX_W);

void dfs(int u, int par = -1) {
	vis[u] = visID;
	for (auto& v : adj[u])
		if (vis[v] < visID)
			dfs(v, u);
		else if (v != par)
			cycle = true;
}

int main() {
	#ifdef LOCAL
	auto stTime = clock();
//	freopen("in.txt", "r", stdin);
	mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());
	#endif
	ios::sync_with_stdio(false);
	cout.precision(10);
	cin.tie(0);

	cin >> n >> m;

	edges.assign(m + 1, pair<int, pii>());
	adj.assign(n + 1, vi());
	vis.assign(n + 1, 0);

	for (int i = 1; i <= m; ++i) {
		cin >> edges[i].sc.fs >> edges[i].sc.sc >> edges[i].fs;
		edgesPerWeight[edges[i].fs].pb(edges[i].sc);
	}

	int q;

	cin >> q;

	V<bool> ans(q + 1, 1);

	for (int i = 1; i <= q; ++i) {
		int k;
		cin >> k;

		for (int j = 0; j < k; ++j) {
			int eID;
			cin >> eID;
			int u = edges[eID].sc.fs, v = edges[eID].sc.sc, w = edges[eID].fs;
			queryEdgesPerWeight[w].pb(mp(i, mp(u, v)));
		}
	}

	UnionFind UF(n + 1);

	for (int w = 1; w < MX_W; ++w) {
		auto& qE = queryEdgesPerWeight[w];
		sort(qE.begin(), qE.end());
		int j = 0;
		for (int i = 0; i < sz(qE); ++i)
			if (i + 1 == sz(qE) || qE[i].fs != qE[i + 1].fs) {

				for (int k = j; k <= i; ++k) {
					int u = UF.findSet(qE[k].sc.fs), v = UF.findSet(qE[k].sc.sc);
					adj[u].pb(v);
					adj[v].pb(u);
				}

				++visID;
				cycle = false;
				for (int k = j; k <= i; ++k) {
					int u = UF.findSet(qE[k].sc.fs);
					if (vis[u] < visID)
						dfs(u);
				}

				if (cycle)
					ans[qE[i].fs] = false;

				for (int k = j; k <= i; ++k) {
					int u = UF.findSet(qE[k].sc.fs), v = UF.findSet(qE[k].sc.sc);
					adj[u].pop_back();
					adj[v].pop_back();
				}
				j = i + 1;
			}

		for (auto& edge : edgesPerWeight[w]) {
			int u = edge.fs, v = edge.sc;
			UF.unionSet(u, v);
		}
	}

	for (int i = 1; i <= q; ++i)
		cout << (ans[i] ? "YES\n" : "NO\n");

	#ifdef LOCAL
	cout << "\n\n\nExecution time: " <<
		(clock() - stTime) * 1e3 / CLOCKS_PER_SEC << " ms" << endl;
	#endif
    return 0;
}
